# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    ft_substr.c.notes                                  :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: sfarren <sfarren@student.42malaga.com>     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/04/23 15:53:55 by sfarren           #+#    #+#              #
#    Updated: 2024/04/29 12:45:38 by sfarren          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "libft.h"
/**
 * Allocates and returns a substring from the given string.
 *
 * The substring begins at the specified start index and has a maximum length
 * of len.
 * @param s The string from which to create the substring.
 * @param start The start index of the substring in the string 's'.
 * @param len The maximum length of the substring.
 * @return The substring if successful, NULL if the allocation fails.
 
Check if the start index is greater than the length of the string or not.
Check if the start plus the len is greater than the length of the whole string.
Allocate enough memory for the substring, 
Copy from s[start] until we reach len characters copied into our new string.
Finally we can return the substring.
 
 */
char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*substr;
	int		i;
	int		j;

	/* If init string is null, ret null. CanÂ´t do something with nothing.*/
	if (!s)
		return (0);
	/* If the start pos is greater that the string len 
	return an empty string
	*/
	if (start > ft_strlen(s))
		return (ft_strdup(""));
	/* If start + len is greater than the length of the string, adjust len to be the length of the string minus start */
	if (start + len > ft_strlen(s))
		len = ft_strlen(s) - start;
	substr = ft_calloc(len + 1, 1)
	// substr = malloc(len + 1);
	if (!substr)
		return (0);
	i = 0;
	while (i < len)
	{
		substr[i] = s[j];
		i++;
		j++;
	}
	// substr[i] = '\0';
	return (substr);
}


/* ****************
The reason for adjusting `len` to be the length of the string minus `start` when `start + len` is greater than the length of the string is to prevent accessing memory beyond the string's end. 

In C, strings are null-terminated, meaning they end with a `\0` character. If you try to access memory beyond this, you could encounter undefined behavior, which could lead to program crashes or other unexpected results.

By adjusting `len` to be the length of the string minus `start`, you ensure that you only copy characters that are within the bounds of the original string, preventing any potential out-of-bounds memory access.
* ******************/